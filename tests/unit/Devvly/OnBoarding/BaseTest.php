<?php


namespace Tests\unit\Devvly\OnBoarding;


use Devvly\OnBoarding\Clearent\Client;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;
use Webkul\SAASCustomizer\Models\User\Admin;

class BaseTest extends TestCase
{
  protected $user;
  protected function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $domain = "http://test.localhost";
    $_SERVER['SERVER_NAME'] = $domain;
    $this->user = Admin::where('email','hussein@devvly.com')->get()->first();
  }

  public function mockClient()
  {
    $methods = get_class_methods(Client::class);
    $client = $this->createMock(Client::class);
    $client
        ->expects($this->any())
        ->method('get')
        ->willReturnCallback(function(...$args){
          return $this->getData($args[0], 'get');
        });

    $client
        ->expects($this->any())
        ->method('post')
        ->willReturnCallback(function(...$args){
          return $this->getData($args[0], 'post');
        });
    $client
        ->expects($this->any())
        ->method('put')
        ->willReturnCallback(function(...$args){
          return $this->getData($args[0], 'put');
        });
    $this->app->instance(Client::class, $client);
    return $client;
  }

  public function getData($url, $method)
  {
    $path = null;
    switch ($url){
      case strpos($url, '/BoardingManagement/v1.0/Applications/') !== false:
        $path = __DIR__."/assets/responses/app.json";
        break;
      case strpos($url, '/demographics/v1.0/Merchants') !== false:
        $path = __DIR__."/assets/responses/merchant.json";
        break;
      case strpos($url,'/demographics/v1.0/MerchantPhysicalAddresses') !== false:
      case strpos($url,'/demographics/v1.0/MerchantMailingAddresses') !== false:
        $path = __DIR__."/assets/responses/physical_address.json";
        break;
      case strpos($url, '/demographics/v1.0/BusinessContacts') !== false:
        $path = __DIR__."/assets/responses/business_contact.json";
        if($method === 'get'){
          $path = __DIR__."/assets/responses/business_contacts.json";
        }
        break;
      case strpos($url, '/demographics/v2.0/Taxpayers') !== false:
        $path = __DIR__."/assets/responses/tax_payer.json";
        break;
      case strpos($url, '/demographics/v1.0/SiteSurveys') !== false:
        $path = __DIR__."/assets/responses/site_survey.json";
        break;
    }
    return json_decode(file_get_contents($path), true);
  }

  /**
   * @covers ::upload
   */
  public function testUpload($field = null, $file_path = null)
  {
    if(!$file_path){
      $file_path = "/tests/unit/Devvly/OnBoarding/assets/image.png";
    }
    if(!$field){
      $field = "firearms_license";
    }
    $image_path = base_path($file_path);
    $file = new UploadedFile($image_path,'image.png','image/png',null,TRUE);
    $data[$field] = $file;
    $response = $this
        ->actingAs($this->user,'admin')
        ->post(route('onboarding.documents.upload'), $data,['Accept' => "application/json"]);
    $response->assertStatus(200);
    $json_response = $response->getContent();
    $result = json_decode($json_response, true);
    $this->assertIsArray($result);
    $this->assertArrayHasKey('result', $result);
    $this->assertIsArray($result['result']);
    $this->assertArrayHasKey($field, $result['result']);
    return $result['result'][$field];
  }
}